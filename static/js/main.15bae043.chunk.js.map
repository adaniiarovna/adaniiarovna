{"version":3,"sources":["models/User.js","models/Message.js","stores/RootStore.js","components/MessageComponent.js","components/ChatComponent.js","components/SignInComponent.js","App.js","serviceWorker.js","index.js"],"names":["User","user","this","id","name","observable","Message","data","content","sender","time","RootStore","messages","push","localStorage","removeItem","setItem","JSON","stringify","action","MessageComponent","inject","observer","props","store","className","Card","style","width","backgroundColor","Body","Text","fontSize","moment","calendar","src","React","Component","ChatComponent","sendMessage","state","height","window","innerHeight","marginTop","Title","Button","onClick","signOut","size","variant","map","v","InputGroup","FormControl","placeholder","onChange","e","setState","target","value","length","Append","SignInComponent","Form","Group","controlId","Control","type","signIn","disabled","block","parse","getItem","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.15bae043.chunk.js","sourcesContent":["import {action, observable} from 'mobx';\r\n\r\nclass User {\r\n  @observable id = 0;\r\n  @observable name = '';\r\n\r\n  constructor(user) {\r\n    this.id = user.id;\r\n    this.name = user.name;\r\n  }\r\n}\r\n\r\nexport default User;\r\n","import {action, observable} from 'mobx';\r\n\r\nclass Message {\r\n  @observable id = 0;\r\n  @observable content = '';\r\n  @observable sender = null;\r\n  @observable time = 0;\r\n  @observable status = '';\r\n\r\n  constructor(data) {\r\n    this.id = data.id || 0;\r\n    this.content = data.content;\r\n    this.sender = data.sender;\r\n    this.time = data.time || 0;\r\n  }\r\n}\r\n\r\nexport default Message;\r\n","import {action, observable} from 'mobx';\r\nimport User from '../models/User';\r\nimport Message from '../models/Message';\r\n\r\nclass RootStore {\r\n  @observable user = null;\r\n  @observable messages = [];\r\n\r\n  constructor(user) {\r\n    this.user = user ? new User(user) : null;\r\n  }\r\n\r\n  @action sendMessage(content) {\r\n    this.messages.push(new Message({content, sender: this.user}));\r\n  }\r\n\r\n  @action signOut() {\r\n    this.user = null;\r\n    localStorage.removeItem('user');\r\n  }\r\n\r\n  @action signIn(data) {\r\n    this.user = new User(data);\r\n    localStorage.setItem('user', JSON.stringify(this.user));\r\n  }\r\n}\r\n\r\nexport default RootStore;\r\n","import React from 'react';\r\nimport {Card} from 'react-bootstrap';\r\nimport {inject, observer} from 'mobx-react';\r\nimport moment from 'moment';\r\n\r\n@inject('store') @observer\r\nclass MessageComponent extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.store = this.props.store;\r\n  }\r\n\r\n  render() {\r\n    const {data} = this.props;\r\n\r\n    if (data.sender.id === this.store.user.id) {\r\n      return (\r\n        <div className={'d-flex justify-content-end'}>\r\n          <Card className={'mb-4'} style={{ width: '20rem', backgroundColor: 'rgba(0, 255, 0, 0.5)' }}>\r\n            <Card.Body className={'p-2'}>\r\n              <Card.Text>\r\n                <span>Message content</span>\r\n                <div className={'d-flex mt-1 justify-content-between'}>\r\n                  <span style={{fontSize: 14}}>Sending...</span>\r\n                  <span style={{fontSize: 14}} className={'text-muted'}>{moment().calendar()}</span>\r\n                </div>\r\n              </Card.Text>\r\n            </Card.Body>\r\n          </Card>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <Card className={'mb-4'} style={{ width: '20rem' }}>\r\n        <Card.Body className={'p-2'}>\r\n          <Card.Text>\r\n            <div className={'d-flex justify-content-between'}>\r\n              <strong>Sender name</strong>\r\n              <span className={'text-muted'}>11.11.2020 10:10</span>\r\n            </div>\r\n            <div className={'d-flex justify-content-start'}>\r\n              <img className={'avatar'} src=\"https://i.dlpng.com/static/png/6728146_preview.png\" />\r\n              <span className={'mt-2'}>Message content</span>\r\n            </div>\r\n          </Card.Text>\r\n        </Card.Body>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MessageComponent;\r\n","import React from 'react';\r\nimport {inject, observer} from 'mobx-react';\r\nimport {Card, Button, FormControl, InputGroup} from 'react-bootstrap';\r\nimport {FiSend} from 'react-icons/fi';\r\nimport MessageComponent from './MessageComponent';\r\n\r\n@inject('store') @observer\r\nclass ChatComponent extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.store = this.props.store;\r\n\r\n    this.state = {\r\n      content: '',\r\n    };\r\n  }\r\n\r\n  sendMessage = () => {\r\n    this.store.sendMessage(this.state.content);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div style={{height: window.innerHeight}} className={'d-flex justify-content-center align-items-center'}>\r\n        <Card style={{width: 550, height: window.innerHeight - 100, marginTop: 30}}>\r\n          <Card.Body>\r\n            <Card.Title className={'text-center d-flex justify-content-between align-items-center'}>\r\n              <div>Welcome, {this.store.user.name}!</div>\r\n              <Button onClick={() => this.store.signOut()} size={'sm'} variant=\"danger\">Sign Out</Button>\r\n            </Card.Title>\r\n            <div className={'mb-2 messages p-3'}>\r\n              {this.store.messages.map((v) => (\r\n                <MessageComponent data={v} />\r\n              ))}\r\n            </div>\r\n            <Card.Text>\r\n              <InputGroup className=\"mb-3\">\r\n                <FormControl\r\n                  placeholder=\"Type message here...\"\r\n                  onChange={(e) => this.setState({content: e.target.value})}\r\n                  value={this.state.content}\r\n                />\r\n                {this.state.content.length > 0 && (\r\n                  <InputGroup.Append>\r\n                    <Button onClick={this.sendMessage} variant=\"outline-secondary\">\r\n                      <FiSend />\r\n                    </Button>\r\n                  </InputGroup.Append>\r\n                )}\r\n              </InputGroup>\r\n            </Card.Text>\r\n          </Card.Body>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ChatComponent;\r\n","import React from 'react';\r\nimport {Card, Button, Form} from 'react-bootstrap';\r\nimport {inject, observer} from 'mobx-react';\r\n\r\n@inject('store') @observer\r\nclass SignInComponent extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      name: '',\r\n    };\r\n\r\n    this.store = this.props.store;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div style={{height: window.innerHeight}} className={'d-flex justify-content-center align-items-center'}>\r\n        <Card style={{width: 250}}>\r\n          <Card.Body>\r\n            <Card.Title className={'text-center'}>Please, sign in</Card.Title>\r\n            <Card.Text>\r\n              <Form.Group controlId=\"formBasicEmail\">\r\n                <Form.Control onChange={(e) => this.setState({name: e.target.value})} value={this.state.name} type=\"text\" placeholder=\"Enter your name\" />\r\n              </Form.Group>\r\n            </Card.Text>\r\n            <Button onClick={() => this.store.signIn({id: 0, name: this.state.name})} disabled={this.state.name.length < 1} block variant=\"primary\">Sign In</Button>\r\n          </Card.Body>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SignInComponent;\r\n","import React from 'react';\nimport './App.css';\nimport {Provider} from 'mobx-react';\nimport RootStore from './stores/RootStore';\nimport ChatComponent from './components/ChatComponent';\nimport SignInComponent from './components/SignInComponent';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {observer} from 'mobx-react';\n\nconst store = new RootStore(JSON.parse(localStorage.getItem('user')) || null);\n\n@observer\nclass App extends React.Component {\n  render() {\n    return (\n      <Provider store={store}>\n        {store.user ? <ChatComponent /> : <SignInComponent />}\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}